<?php

namespace App\Models;

use Gecche\Cupparis\App\Breeze\Breeze;
use Illuminate\Support\Facades\DB;

/**
 * Breeze (Eloquent) model for copertine table.
 */
class Copertina extends Breeze
{
	use Relations\CopertinaRelations;



//    use ModelWithUploadsTrait;

    protected $table = 'copertine';

    //protected $fillable = [];

    public $timestamps = true;
    public $ownerships = true;

    public $appends = [

    ];



    public static $relationsData = [

        'fotos' => [self::MORPH_MANY, 'related' => Foto::class, 'name' => 'mediable'],

//        'belongsto' => array(self::BELONGS_TO, Copertina::class, 'foreignKey' => '<FOREIGNKEYNAME>'),
//        'belongstomany' => array(self::BELONGS_TO_MANY, Copertina::class, 'table' => '<TABLEPIVOTNAME>','pivotKeys' => [],'foreignKey' => '<FOREIGNKEYNAME>','otherKey' => '<OTHERKEYNAME>') ,
//        'hasmany' => array(self::HAS_MANY, Copertina::class, 'table' => '<TABLENAME>','foreignKey' => '<FOREIGNKEYNAME>'),
    ];

    public static $rules = [
//        'username' => 'required|between:4,255|unique:users,username',
    ];

    public $columnsForSelectList = ['titolo_it'];
     //['id','descrizione'];

    public $defaultOrderColumns = ['titolo_it' => 'ASC', ];
     //['cognome' => 'ASC','nome' => 'ASC'];

    public $columnsSearchAutoComplete = ['titolo_it'];
     //['cognome','denominazione','codicefiscale','partitaiva'];

    public $nItemsAutoComplete = 20;
    public $nItemsForSelectList = 100;
    public $itemNoneForSelectList = false;
    public $fieldsSeparator = ' - ';

    protected static function booting()
    {
        parent::booting(); // TODO: Change the autogenerated stub

        $copertina = DB::table('copertine')->where('id',1)->first();

        if (!$copertina) {
            $now = now()->toDateTimeString();
            DB::table('copertine')
                ->insert(['id' => 1,'created_at' => $now,'updated_at' => $now]);
        }
    }

    public function getPictureAttribute()
    {
        $foto = $this->fotos->first();
//        Log::info(print_r($foto,true));
        if ($foto) {
            return $foto->getUrl('orig');
        }
        return null;
    }

}
