<?php

namespace App\Models;

use Gecche\Cupparis\App\Breeze\Breeze;
use Gecche\Cupparis\AppVars\Facades\AppVars;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Str;
use Spatie\Sluggable\SlugOptions;

/**
 * Breeze (Eloquent) model for anni table.
 */
trait PaginaTrait
{

    protected static function bootPaginaTrait(): void
    {
        static::creating(function (Model $model) {
            $model->tipo = $model->getTipoPagina();
        });

        static::updating(function (Model $model) {
            $model->tipo = $model->getTipoPagina();
        });
    }
    public static function getTipoPagina() {
        return property_exists(static::class,'tipoPagina') ?
            static::$tipoPagina : 'standard';
    }

    public function save(array $options = [])
    {
        $ordine = $this->ordine;
        try {
            $saved = parent::save($options); // TODO: Change the autogenerated stub
        } catch (\Throwable $e) {
            if (Str::contains($e->getMessage(),"pag_slug_uq")) {
                throw new \Exception("Le pagine di questa tipologia devono avere dei titoli univoci.");
            }
        }
//        if ($saved && $ordine) {
//            static::where('id','!=',$this->getKey())
//                ->where('ordine',$ordine)
//                ->update(['ordine' => null]);
//        }
        return $saved;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::tipoGlobalScope();

    }


    protected static function tipoGlobalScope()
    {
        static::addGlobalScope('tipo', function (Builder $builder) {

            $builder->where('tipo', static::getTipoPagina());

        });
    }


    public function getSlugOptions() : SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('titolo_it')
            ->saveSlugsTo('slug_it');
    }


    public function getPictureAttribute()
    {
        $foto = $this->fotos->first();
//        Log::info(print_r($foto,true));
        if ($foto) {
            return $foto->getUrl('orig');
        }
        return null;
    }

    public function getPictureAltAttribute()
    {
        $foto = $this->fotos->first();
        $alt = $this->titolo_it ?: "Foto principale";
//        Log::info(print_r($foto,true));
        if ($foto) {
            $alt = $foto->nome ?: $alt;
        }
        return $alt;
    }

    public function getRouteKeyName()
    {
        return 'slug_it';
    }
}
