<?php

namespace App\Models;

use Gecche\Cupparis\App\Breeze\Breeze;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;

/**
 * Breeze (Eloquent) model for eventi table.
 */
class Evento extends Breeze
{
	use Relations\EventoRelations;




    use HasSlug;
//    use ModelWithUploadsTrait;

    protected $table = 'eventi';

    //protected $fillable = [];

    public $timestamps = true;
    public $ownerships = true;

    public $appends = [

    ];


    public static $relationsData = [

        'fotos' => [self::MORPH_MANY, 'related' => Foto::class, 'name' => 'mediable'],
        'attachments' => [self::MORPH_MANY, 'related' => Attachment::class, 'name' => 'mediable'],
        'sezioni' => [self::MORPH_MANY, 'related' => SezioneContenuto::class, 'name' => 'sezionable'],


//        'belongsto' => array(self::BELONGS_TO, Evento::class, 'foreignKey' => '<FOREIGNKEYNAME>'),
//        'belongstomany' => array(self::BELONGS_TO_MANY, Evento::class, 'table' => '<TABLEPIVOTNAME>','pivotKeys' => [],'foreignKey' => '<FOREIGNKEYNAME>','otherKey' => '<OTHERKEYNAME>') ,
//        'hasmany' => array(self::HAS_MANY, Evento::class, 'table' => '<TABLENAME>','foreignKey' => '<FOREIGNKEYNAME>'),
    ];

    public static $rules = [
//        'username' => 'required|between:4,255|unique:users,username',
    ];

    public $columnsForSelectList = ['titolo_it'];
     //['id','descrizione'];

    public $defaultOrderColumns = ['data' => 'ASC', 'titolo_it' => 'ASC', ];
     //['cognome' => 'ASC','nome' => 'ASC'];

    public $columnsSearchAutoComplete = ['titolo_it'];
     //['cognome','denominazione','codicefiscale','partitaiva'];

    public $nItemsAutoComplete = 20;
    public $nItemsForSelectList = 100;
    public $itemNoneForSelectList = false;
    public $fieldsSeparator = ' - ';

    public function getSlugOptions() : SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('titolo_it')
            ->saveSlugsTo('slug_it');
    }

    public function save(array $options = [])
    {
        $evidenza = $this->evidenza;
        $saved = parent::save($options); // TODO: Change the autogenerated stub
        if ($saved && $evidenza) {
            static::where('id','!=',$this->getKey())
                ->where('evidenza',$evidenza)
                ->update(['evidenza' => null]);
        }

        return $saved;
    }


    public function getPictureAttribute()
    {
        $foto = $this->fotos->first();
//        Log::info(print_r($foto,true));
        if ($foto) {
            return $foto->getUrl('orig');
        }
        return '/imagecache/orig/0';
    }
}
