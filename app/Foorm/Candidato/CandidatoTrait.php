<?php

namespace App\Foorm\Candidato;


use App\Models\Corso;
use App\Models\Evento;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

trait CandidatoTrait
{

    protected $validationCacheKey = 'candidatura.validation';

    public function setValidationSettings($input, $rules = null)
    {

        $validationCacheKey = $this->validationCacheKey;

        if (true || !Cache::has($validationCacheKey)) {
            $steps = Config::get('fe.candidatura.steps', []);
            $validation = [];
            foreach ($steps as $stepKey => $stepData) {
                $validation[$stepKey] = [];
                foreach (Arr::get($stepData, 'sections', []) as $sectionKey => $section) {
                    foreach (Arr::get($section, 'fields', []) as $fieldName => $fieldData) {
                        $validation[$stepKey][$fieldName] = Arr::get($fieldData, 'validation', []);
                    }
                }
            }
            Cache::forever($validationCacheKey, $validation);
        }

        $validationRules = Cache::get($validationCacheKey);

        $step = $this->step;

        if ($step) {
            $validationRules = Arr::get($validationRules,$step,[]);
        } else {
            $fullValidationRules = [];
            foreach (array_keys($validationRules) as $currStep) {
                $fullValidationRules = $fullValidationRules + $validationRules[$currStep];
            }
            $validationRules = $fullValidationRules;
        }

        if (array_key_exists('corsi',$validationRules)) {
            unset($validationRules['corsi']);
            $validationRules['corsi-id'] = ['array','min:2'];
        }

        if (array_key_exists('voti',$validationRules)) {
            unset($validationRules['voti']);
            $validationRules['voti-id'] = ['array'];
            $validationRules['voti-materia_id.*'] = ['required'];
            $validationRules['voti-voto_anno_1.*'] = ['required','numeric','max:10'];
            $validationRules['voti-voto_anno_2.*'] = ['required','numeric','max:10'];
            $validationRules['voti-voto_primo_quadrimestre.*'] = ['required','numeric','max:10'];
        }

        $this->validationSettings['rules'] = $validationRules;

//        Log::info("VALIDATION RULES");
//
//        Log::info($this->validationSettings['rules']);
//        Log::info($this->step);

    }

    protected function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->step = Arr::get($this->input,'step');

    }


    protected
    function saveRelated($input)
    {

        foreach ($this->belongsTos as $belongsToKey => $belongsToValue) {
            $saveRelatedName = 'saveRelated' . Str::studly($belongsToKey);
            $belongsToType = $belongsToValue['relationType'];
            $saveParams = $this->getRelationConfig($belongsToKey, 'saveParams', []);
            $this->$saveRelatedName($belongsToType, $belongsToKey, $belongsToValue, $input, $saveParams);
        }


        foreach ($this->hasManies as $hasManyKey => $hasManyValue) {
            if ($this->step) {
                $stepValidationRules = Arr::get(Cache::get($this->validationCacheKey,[]),$this->step,[]);
                if (!array_key_exists($hasManyKey,$stepValidationRules)) {
                    continue;
                }
            }
            $saveRelatedName = 'saveRelated' . Str::studly($hasManyKey);
            $hasManyType = $hasManyValue['relationType'];
            $saveType = $this->getRelationConfig($hasManyKey, 'saveType');
            $saveParams = $this->getRelationConfig($hasManyKey, 'saveParams', []);

            if ($saveType) {
                $hasManyType = $hasManyType . Str::studly($saveType);
            }

            $hasManyInputs = $this->getHasManyInputs($hasManyKey,$input);
            $this->$saveRelatedName($hasManyType, $hasManyKey, $hasManyValue, $hasManyInputs, $saveParams);
        }
    }

    protected function saveModel($input)
    {
        if ($this->step) {
            $this->model->addStepToInfo($this->step);
        }
        return parent::saveModel($input); // TODO: Change the autogenerated stub
    }

    public function save($input = null, $validate = true)
    {
        $saved = parent::save($input, $validate); // TODO: Change the autogenerated stub

        if ($saved) {
            $this->model->calculateMedia(true);
        }
        return $saved;
    }

    public function createOptionsCorsi($fieldValue,$defaultOptionsValues,$relationName = null,$relationMetadata = []) {

        Log::info("HERE CORSI " . $this->model->iniziativa_id);
        $corso = new Corso();
        if (!$this->model->iniziativa) {
            return $corso->getForSelectList();
        }

        return $corso->getForSelectList($corso->where('iniziativa_id',$this->model->iniziativa_id));

    }


}
